[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bases para la ciencia de datos moderna",
    "section": "",
    "text": "1 Presentación\nTaller práctico para instalar y organizar un entorno moderno de ciencia de datos con enfasis en la reproducibilidad, interoperabilidad y colaborativo.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bases para la ciencia de datos moderna — Temario</span>"
    ]
  },
  {
    "objectID": "index.html#sesión-1-uv-git-estructura-narrativa",
    "href": "index.html#sesión-1-uv-git-estructura-narrativa",
    "title": "Bases para la ciencia de datos moderna",
    "section": "Sesión 1 — uv + Git + Estructura + Narrativa",
    "text": "Sesión 1 — uv + Git + Estructura + Narrativa\nTemas: uv (entornos, dependencias), Git (init, commits, ramas, .gitignore), estructura base (data/001_raw→003_processed, src/, notebooks/, reports/), narrativa computacional (nombres y numeración 001→003).\nActividades: inicializar repo y entorno con uv, crear árbol de carpetas y README del pipeline, primer commit y rama de trabajo.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bases para la ciencia de datos moderna — Temario</span>"
    ]
  },
  {
    "objectID": "index.html#sesión-2-graficado-con-matplotlib-seaborn-y-plotly",
    "href": "index.html#sesión-2-graficado-con-matplotlib-seaborn-y-plotly",
    "title": "Bases para la ciencia de datos moderna",
    "section": "Sesión 2 — Graficado con Matplotlib, Seaborn y Plotly",
    "text": "Sesión 2 — Graficado con Matplotlib, Seaborn y Plotly\nTemas: Matplotlib (figuras/axes, guardado), Seaborn (relplot/displot/catplot, estilos), Plotly (express/graph_objects, export HTML).\nActividades: reproducir línea, barras y dispersión en las 3 librerías; guardar salidas en reports/; exportar un HTML interactivo.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bases para la ciencia de datos moderna — Temario</span>"
    ]
  },
  {
    "objectID": "index.html#sesión-3-marimo-vscode",
    "href": "index.html#sesión-3-marimo-vscode",
    "title": "Bases para la ciencia de datos moderna",
    "section": "Sesión 3 — Marimo + VSCode",
    "text": "Sesión 3 — Marimo + VSCode\nTemas: Marimo (create/edit/run, celdas reactivas, parámetros, export HTML), VSCode (extensiones Python/Jupyter, terminal, linters/formatters).\nActividades: crear una EDA en Marimo con al menos una celda parametrizada; exportar a HTML; ajustar configuración básica de VSCode.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bases para la ciencia de datos moderna — Temario</span>"
    ]
  },
  {
    "objectID": "index.html#sesión-4-quarto-y-tu-tesis",
    "href": "index.html#sesión-4-quarto-y-tu-tesis",
    "title": "Bases para la ciencia de datos moderna",
    "section": "Sesión 4 — Quarto y tu tesis",
    "text": "Sesión 4 — Quarto y tu tesis\nTemas: Quarto (book/article, _quarto.yml, capítulos), referencias (.bib, CSL), cross-referencias (figuras/tablas/ecuaciones).\nActividades: crear proyecto de tesis y render HTML/PDF; agregar capítulos iniciales y bibliografía; insertar figuras/tablas con referencias internas.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bases para la ciencia de datos moderna — Temario</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_001_narrativa_uv_git/001_narrativa.html",
    "href": "sesiones/notebooks_001_narrativa_uv_git/001_narrativa.html",
    "title": "3  Paradigma de ciencia moderna",
    "section": "",
    "text": "4 Espacio de trabajo\nEl espacio de trabajo es un folder con una estructura, por ejemplo:\nPeeero, se puede ir mucho más allá:",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Paradigma de ciencia moderna</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_001_narrativa_uv_git/001_narrativa.html#guía-breve-de-nombres-python-proyectos-de-datos",
    "href": "sesiones/notebooks_001_narrativa_uv_git/001_narrativa.html#guía-breve-de-nombres-python-proyectos-de-datos",
    "title": "3  Paradigma de ciencia moderna",
    "section": "Guía breve de nombres (Python / proyectos de datos)",
    "text": "Guía breve de nombres (Python / proyectos de datos)\n\nEstilo único: en Python usa snake_case para variables y funciones (temp_exterior) y UPPER_SNAKE_CASE para constantes (RHO_AIRE).\nEvita df: nombra por contenido y nivel de proceso. Ej.: meteo_raw, meteo_limpia, consumos_mensuales, ti_dormitorio3, temp_ambiente, temperaturas_horarias.\nNombres alusivos y claros: que digan qué son y, si aplica, unidades o periodo. Sufijos útiles: _kwh, _c, _m2, _porc, _horario, _diario, _mensual.\nASCII solo: sin acentos, eñes ni símbolos raros. Usa anio, nino, temperatura, no año, niño, temperatura°.\nCoherencia semántica: usa el mismo término siempre (temp o temperatura, no ambos).\nFunciones = verbo + objeto: calcula_confort(), carga_meteo(), genera_reporte().\nColumnas/keys: snake_case y sin espacios: fecha_local, ghi, rh, vel_aire_ms.\nEvita abreviaturas crípticas: solo acrónimos estándar del dominio (GHI, DNI, RH). Si dudas, escribe completo.\nLongitud razonable: mejor claro que corto, pero evita “testamento” (energia_util_kwh &gt; eu y también &gt; energia_util_total_promedio_kwh_2024).",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Paradigma de ciencia moderna</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_001_narrativa_uv_git/001_narrativa.html#buenos-vs-malos-rápido",
    "href": "sesiones/notebooks_001_narrativa_uv_git/001_narrativa.html#buenos-vs-malos-rápido",
    "title": "3  Paradigma de ciencia moderna",
    "section": "Buenos vs malos (rápido)",
    "text": "Buenos vs malos (rápido)\nBien\nmeteo_raw = lee_epw(\"temixco.epw\")\nmeteo_limpia = depura_meteo(meteo_raw)\ntemps_diarias_c = meteo_limpia[[\"fecha\", \"tdb\"]].resample(\"D\").mean()\nRHO_AIRE = 1.225\nMal\ndf = lee_epw(\"temixco.epw\")\nDataLimpia = depura_meteo(df)\ntªDiarias = DataLimpia.resample(\"D\").mean()\nRhoAire = 1.225",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Paradigma de ciencia moderna</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_001_narrativa_uv_git/001_narrativa.html#patrones-útiles-para-tu-flujo",
    "href": "sesiones/notebooks_001_narrativa_uv_git/001_narrativa.html#patrones-útiles-para-tu-flujo",
    "title": "3  Paradigma de ciencia moderna",
    "section": "Patrones útiles para tu flujo",
    "text": "Patrones útiles para tu flujo\n\nNivel de proceso: meteo_raw → meteo_intermediate → meteo_processed\nCaso de estudio: caso_a_parametros, caso_a_resultados\nUnidades al final: energia_kwh, temp_c, vel_viento_ms\nTiempo en el nombre si aplica: consumo_2024_mensual, ocupacion_horaria\n\nSi más adelante necesitas reglas para renombrar columnas automáticamente a snake_case desde fuentes externas, te paso un snippet corto para normalizarlas.\nMostrar repo como ejemplo https://github.com/AltamarMx/EPW_EdificioBioclimatico",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Paradigma de ciencia moderna</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_001_narrativa_uv_git/002_miniconda_terminal.html",
    "href": "sesiones/notebooks_001_narrativa_uv_git/002_miniconda_terminal.html",
    "title": "4  Miniconda",
    "section": "",
    "text": "¿Por qué usarla?\nMiniconda es un instalador mínimo de la distribución Anaconda: incluye solo conda, Python y lo esencial. A partir de ahí tú instalas únicamente los paquetes que necesitas.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Miniconda</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_001_narrativa_uv_git/002_miniconda_terminal.html#por-qué-usarla",
    "href": "sesiones/notebooks_001_narrativa_uv_git/002_miniconda_terminal.html#por-qué-usarla",
    "title": "4  Miniconda",
    "section": "",
    "text": "Ligera y controlada: instalación pequeña; evitas bajar cientos de paquetes que no usarás.\nEntornos aislados: con conda o uv creas entornos por proyecto para evitar conflictos de versiones y asegurar reproducibilidad.\nMultiplataforma y sencilla de instalar: instaladores oficiales para Windows, macOS y Linux.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Miniconda</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_001_narrativa_uv_git/002_miniconda_terminal.html#abrir-la-consola-correcta",
    "href": "sesiones/notebooks_001_narrativa_uv_git/002_miniconda_terminal.html#abrir-la-consola-correcta",
    "title": "4  Miniconda",
    "section": "1) Abrir la consola correcta",
    "text": "1) Abrir la consola correcta\nAbre Miniconda PowerShell Prompt desde el menú Inicio. Verifica que existe python.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Miniconda</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_001_narrativa_uv_git/002_miniconda_terminal.html#qué-es-el-home-y-cómo-ubicarlo",
    "href": "sesiones/notebooks_001_narrativa_uv_git/002_miniconda_terminal.html#qué-es-el-home-y-cómo-ubicarlo",
    "title": "4  Miniconda",
    "section": "2) ¿Qué es el HOME y cómo ubicarlo?",
    "text": "2) ¿Qué es el HOME y cómo ubicarlo?\nTu HOME es tu carpeta personal (p. ej., C:\\Users\\TuUsuario).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Miniconda</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_001_narrativa_uv_git/002_miniconda_terminal.html#moverte-entre-carpetas-navegación-básica",
    "href": "sesiones/notebooks_001_narrativa_uv_git/002_miniconda_terminal.html#moverte-entre-carpetas-navegación-básica",
    "title": "4  Miniconda",
    "section": "3) Moverte entre carpetas (navegación básica)",
    "text": "3) Moverte entre carpetas (navegación básica)\n# Ver carpeta actual (alias de Get-Location)\npwd\n\n# Listar contenido (alias de Get-ChildItem)\nls\ndir\n\n# Entrar a una subcarpeta\ncd nombre_de_carpeta\n\n# Subir un nivel\ncd ..\n\n# Ir a una ruta con espacios (usa comillas)\ncd \"C:\\Program Files\\SomeApp\"\n\nNota: En PowerShell, cd es alias de change directory, ls/dir son alias de Get-ChildItem, y pwd es Get-Location.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Miniconda</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_001_narrativa_uv_git/002_miniconda_terminal.html#abrir-el-explorador-de-archivos-desde-la-carpeta-actual",
    "href": "sesiones/notebooks_001_narrativa_uv_git/002_miniconda_terminal.html#abrir-el-explorador-de-archivos-desde-la-carpeta-actual",
    "title": "4  Miniconda",
    "section": "4) Abrir el Explorador de archivos desde la carpeta actual",
    "text": "4) Abrir el Explorador de archivos desde la carpeta actual\n# Abre el Explorador en el directorio actual\nii .\n# También puedes abrir un archivo o carpeta específica\nii .\\reportes\\index.qmd\n\nii es alias de Invoke-Item y ejecuta la acción por defecto (abrir carpeta/archivo con su app asociada).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Miniconda</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_001_narrativa_uv_git/003_uv.html",
    "href": "sesiones/notebooks_001_narrativa_uv_git/003_uv.html",
    "title": "5  ¿Por qué entornos virtuales?",
    "section": "",
    "text": "Aislamiento de dependencias: cada proyecto instala sus paquetes sin afectar al sistema ni a otros proyectos.\n\nReproducibilidad: puedes reconstruir el ambiente con una lista bloqueada de versiones.\n\nEvitar “entornos del sistema”: reduces errores por Python administrado por el SO o por permisos.\n\nDescartables y locales: se eliminan y recrean rápido; por convención se llaman .venv/ en la raíz del proyecto.\n\n\n6 Recomendaciones de un espacio de trabajo\n\nCrea un entorno virtual por proyecto para aislar dependencias y evitar conflictos.\nUsa uv init espacio-de-trabajo para crear un espacio-de-trabajo\nO entra a espacio-de-trabajo y uv init para inicializar un espacio de trabajo",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>¿Por qué entornos virtuales?</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_001_narrativa_uv_git/004_git.html",
    "href": "sesiones/notebooks_001_narrativa_uv_git/004_git.html",
    "title": "6  ¿Qué es Git?",
    "section": "",
    "text": "¿Por qué usarlo?\nGit es un sistema de control de versiones. Guarda el historial de cambios de tus archivos, permite volver a estados anteriores y colaborar con otras personas sin pisarse el trabajo.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>¿Qué es Git?</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_001_narrativa_uv_git/004_git.html#por-qué-usarlo",
    "href": "sesiones/notebooks_001_narrativa_uv_git/004_git.html#por-qué-usarlo",
    "title": "6  ¿Qué es Git?",
    "section": "",
    "text": "Evitas nombres, ahora tienes versiones o commits\nRecuperar versiones anteriores sin perder trabajo.\nTrabajar en paralelo y combinar cambios.\nRevisar quién cambió qué, cuándo y por qué.\nAutomatizar publicaciones.\n\n\n\n\n\n\n\nPro tip\n\n\n\nEscribe commits pequeños y con mensajes claros en modo imperativo:\nAñade gráfico de radiación horaria en lugar de Añadido gráfico.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>¿Qué es Git?</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_001_narrativa_uv_git/004_git.html#la-importancia-de-.gitignore",
    "href": "sesiones/notebooks_001_narrativa_uv_git/004_git.html#la-importancia-de-.gitignore",
    "title": "6  ¿Qué es Git?",
    "section": "La importancia de .gitignore",
    "text": "La importancia de .gitignore\n.gitignore le dice a Git qué no debe rastrear (archivos temporales, binarios, datos enormes, credenciales, etc.). Ejemplo útil para Python/Quarto/datos:\n# Python\n__pycache__/\n*.pyc\n.venv/\nvenv/\n.env\n\n# Jupyter\n.ipynb_checkpoints/\n\n# Quarto\n.quarto/\n*_cache/\n*.html\n*.pdf\n\n# SO\n.DS_Store\nThumbs.db\n\n# Datos grandes\ndata/raw/\n*.zip\n*.7z\n*.tar\n*.tar.gz\n*.csv # si son muy grandes o no se pueden generar rápido\n\n# Meteo / simulación (ajusta a tu caso)\n*.epw\n*.wea\n*.osm\n*.idf\n*.rad\n*.oct",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>¿Qué es Git?</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_001_narrativa_uv_git/004_git.html#cuidado-con-los-archivos-grandes",
    "href": "sesiones/notebooks_001_narrativa_uv_git/004_git.html#cuidado-con-los-archivos-grandes",
    "title": "6  ¿Qué es Git?",
    "section": "¡Cuidado con los archivos grandes!",
    "text": "¡Cuidado con los archivos grandes!\nGitHub rechaza archivos mayores a 100 MB en un push normal. Subir binarios grandes rompe el repo o te obliga a reescribir historial. Reglas prácticas:\n\nMantén en el repo sólo código, texto y configs.\nLos datos pesados y resultados guárdalos fuera con .gitignore o usa Git LFS si tu organización lo permite.\nAñade patrones al .gitignore para prevenir accidentes (por ejemplo *.epw, *.zip, data/raw/).\n\n\n\n\n\n\n\nAdvertencia\n\n\n\nEvita subir archivos &gt;100 MB. Si llegan a entrar, no intentes “arreglar a mano”; consulta con ChatGPT cómo reescribir historial.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>¿Qué es Git?</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_001_narrativa_uv_git/004_git.html#comandos-básicos-sin-ramas",
    "href": "sesiones/notebooks_001_narrativa_uv_git/004_git.html#comandos-básicos-sin-ramas",
    "title": "6  ¿Qué es Git?",
    "section": "Comandos básicos (sin ramas)",
    "text": "Comandos básicos (sin ramas)\n\nFlujo mínimo: inicializar → revisar → añadir → confirmar → conectar remoto → empujar.\n\n# 0) Configuración inicial (una sola vez en tu máquina)\ngit config --global user.name  \"Tu Nombre\"\ngit config --global user.email \"tu@correo\"\n\n# 1) Crear repositorio dentro de una carpeta existente\ngit init\n\n# 2) Ver estado de cambios\ngit status\n\n\n# 4) Añadir archivos al \"staging area\"\ngit add .                  # todo (mejor ser selectivo)\n\n# 5) Confirmar con mensaje\ngit commit -m \"Inicializa proyecto: estructura, .gitignore y README\"\n\n\n\n\n# Siguientes veces:\ngit push                         # empuja cambios\ngit pull                         # trae cambios del remoto\n\n\n\n\n\n\nNota\n\n\n\nEn repos nuevos, la rama inicial se llama main por defecto. Aquí aún no “trabajamos con ramas”, sólo empujamos nuestro historial a main.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>¿Qué es Git?</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_001_narrativa_uv_git/004_git.html#checklist-antes-de-git-commit",
    "href": "sesiones/notebooks_001_narrativa_uv_git/004_git.html#checklist-antes-de-git-commit",
    "title": "6  ¿Qué es Git?",
    "section": "Checklist antes de git commit",
    "text": "Checklist antes de git commit\n\n.gitignore cubre temporales, binarios y datos pesados.\nEl commit es atómico (un cambio lógico por commit).\nMensaje claro en modo imperativo.\nNo hay archivos &gt;100 MB.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>¿Qué es Git?</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_001_narrativa_uv_git/004_git.html#qué-es-una-rama",
    "href": "sesiones/notebooks_001_narrativa_uv_git/004_git.html#qué-es-una-rama",
    "title": "6  ¿Qué es Git?",
    "section": "¿Qué es una rama?",
    "text": "¿Qué es una rama?\nUna rama es una línea de trabajo paralela al historial principal (main). Permite desarrollar una idea (feature, fix, experimento) sin afectar lo estable. Luego, se integra mediante Pull Request (PR).",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>¿Qué es Git?</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_001_narrativa_uv_git/004_git.html#convenciones-útiles",
    "href": "sesiones/notebooks_001_narrativa_uv_git/004_git.html#convenciones-útiles",
    "title": "6  ¿Qué es Git?",
    "section": "Convenciones útiles",
    "text": "Convenciones útiles\n\nNombres de ramas: feat/nombre-corto, fix/bug-descripcion, docs/…, refactor/….\nMensajes de commit tipo Conventional Commits: feat: agrega cálculo de DH_calido; fix: corrige ruta de EPW.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>¿Qué es Git?</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_001_narrativa_uv_git/004_git.html#flujo-recomendado-para-proponer-una-feature",
    "href": "sesiones/notebooks_001_narrativa_uv_git/004_git.html#flujo-recomendado-para-proponer-una-feature",
    "title": "6  ¿Qué es Git?",
    "section": "Flujo recomendado para proponer una feature",
    "text": "Flujo recomendado para proponer una feature\n\nA) Si tienes permisos de escritura en el repo\n# 1) Asegúrate de estar sincronizado con main\ngit checkout main\ngit pull origin main\n\n# 2) Crea una rama de trabajo\ngit checkout -b feat/panel-diagnostico\n\n# 3) Trabaja y confirma cambios en pequeños commits\ngit add src/panel.py\ngit commit -m \"feat: panel básico con métricas\"\n\n# 4) Mantén tu rama al día (evita conflictos al final)\ngit fetch origin\ngit rebase origin/main   # o: git merge origin/main\n\n# 5) Publica tu rama en el remoto\ngit push -u origin feat/panel-diagnostico\nAhora abre un Pull Request hacia main en la plataforma (GitHub/GitLab):\n\nDescribe el qué y por qué del cambio.\nAdjunta capturas, benchmarks o enlaces a issues.\nPide revisión a personas responsables.\nAtiende comentarios y empuja más commits a la misma rama.\n\nCuando el PR está aprobado y las pruebas (CI) pasan, se integra. Método sugerido:\n\nSquash & Merge: junta todos tus commits en uno solo y mantiene el historial limpio.\n\nLimpieza tras el merge:\n# borrar rama remota y local\ngit push origin --delete feat/panel-diagnostico\ngit checkout main\ngit pull origin main\ngit branch -d feat/panel-diagnostico\n\n\nB) Si no tienes permisos (flujo de fork)\n\nHaz un fork del repo.\nClona tu fork:\ngit clone https://github.com/tu-usuario/proyecto.git\ncd proyecto\nAgrega el remoto original para sincronizarte:\ngit remote add upstream https://github.com/org/proyecto.git\ngit fetch upstream\ngit checkout main\ngit merge upstream/main   # o: git rebase upstream/main\nCrea tu rama y trabaja:\ngit checkout -b feat/panel-diagnostico\n# ... commits ...\ngit push -u origin feat/panel-diagnostico\nAbre el PR desde tu fork origin/feat/... hacia org/proyecto:main.\n\n\n\n\n\n\n\nReglas de convivencia\n\n\n\n\nNo subas datos pesados ni secretos (usa .gitignore y variables de entorno).\nSigue las guías de estilo del repo (linters, formateo, tests).\nUn PR debe ser pequeño y revisable. Si crece, divídelo.\nMantén tu rama actualizada con main con frecuencia para minimizar conflictos.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>¿Qué es Git?</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_001_narrativa_uv_git/004_git.html#comandos-de-apoyo-en-ramas",
    "href": "sesiones/notebooks_001_narrativa_uv_git/004_git.html#comandos-de-apoyo-en-ramas",
    "title": "6  ¿Qué es Git?",
    "section": "Comandos de apoyo en ramas",
    "text": "Comandos de apoyo en ramas\n# Crear y cambiar a una rama nueva\ngit checkout -b feat/nueva-funcion\n\n# Ver ramas\ngit branch                # locales\ngit branch -r             # remotas\ngit branch -a             # todas\n\n# Cambiar de rama\ngit checkout main\n\n# Traer cambios de main a tu rama (elige uno)\ngit merge origin/main\n# o bien, reescribir tu rama encima de main (historial más lineal)\ngit rebase origin/main\n\n# Resolver conflictos: edita archivos marcados y luego\ngit add &lt;archivo_resuelto&gt;\ngit rebase --continue     # si estabas en rebase\n# o git commit             # si estabas en merge\n\n# Publicar la rama de trabajo\ngit push -u origin feat/nueva-funcion",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>¿Qué es Git?</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_002_matplotlib_seaborn_plotly/000_Conoce_los_datos.html",
    "href": "sesiones/notebooks_002_matplotlib_seaborn_plotly/000_Conoce_los_datos.html",
    "title": "7  Datos de una estación meteorológica",
    "section": "",
    "text": "archivo en formato parquet\nDel 27 de octubre de 2023 al 30 de abril del 2025\nDatos cada 10 minutos\ndhi: diffuse horizontal irradiance\ndni: direct normal irradiance\nghi: global horizontal irradiance\np_atm: presión atmosférica\nrain_acc: mm de lluvia\nrh: relative humidity\nsolar_altitude: altura solar en grados\ntdb: temperature dry bulb\nuv: ultra violeta\nwd: wind direction\nws: wind speed\n\n\n\n\n\n\n\nImportante\n\n\n\nEs importante conocer la estructura y tipos de los datos\ntmx.info()\n\n\n\nimport pandas as pd\nimport missingno as msno\n\n\nf = '../data/ClimaLab_2023-10-27_2025-04-30.parquet'\ntmx = pd.read_parquet(f)\ntmx.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nDatetimeIndex: 79036 entries, 2023-10-27 16:40:00 to 2025-04-30 00:00:00\nData columns (total 11 columns):\n #   Column          Non-Null Count  Dtype  \n---  ------          --------------  -----  \n 0   dhi             39186 non-null  float64\n 1   dni             39043 non-null  float64\n 2   ghi             39104 non-null  float64\n 3   p_atm           79036 non-null  float64\n 4   rain_acc        79036 non-null  float64\n 5   rh              79036 non-null  float64\n 6   solar_altitude  79036 non-null  float64\n 7   tdb             79036 non-null  float64\n 8   uv              79036 non-null  float64\n 9   wd              79036 non-null  float64\n 10  ws              79036 non-null  float64\ndtypes: float64(11)\nmemory usage: 7.2 MB\n\n\n\n\n\n\n\n\nImportante\n\n\n\nNota que si tienes una fecha, conviene tenerlo como datetime y en el índice.\ndatetime\n\n\n\ntmx\n\n\n\n\n\n\n\nvariable\ndhi\ndni\nghi\np_atm\nrain_acc\nrh\nsolar_altitude\ntdb\nuv\nwd\nws\n\n\ndate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2023-10-27 16:40:00\nNaN\n443.2\n238.0\n873.2120\n17.1\n61.14\n18.644204\n28.07\n0.018\n226.50\n1.569\n\n\n2023-10-27 16:50:00\nNaN\nNaN\n187.5\n873.2559\n6.3\n62.76\n16.430841\n27.78\n0.014\n171.60\n1.631\n\n\n2023-10-27 17:00:00\n1360.00\nNaN\n167.5\n873.2161\n27.8\n64.26\n14.204506\n28.00\n0.011\n314.70\n0.479\n\n\n2023-10-27 17:10:00\n74.14\n520.5\n163.1\n873.1834\n5.4\n66.82\n11.967374\n28.69\n0.009\n163.60\n0.504\n\n\n2023-10-27 17:20:00\n67.62\n269.2\n126.1\n873.2775\n1.5\n60.92\n9.722172\n28.77\n0.006\n260.30\n0.964\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2025-04-29 23:20:00\nNaN\nNaN\nNaN\n861.8378\n0.0\n43.17\n-52.087453\n26.46\n0.000\n164.30\n0.808\n\n\n2025-04-29 23:30:00\nNaN\nNaN\nNaN\n861.8724\n0.0\n46.12\n-53.192891\n26.30\n0.000\n337.00\n0.518\n\n\n2025-04-29 23:40:00\nNaN\nNaN\nNaN\n861.8623\n0.0\n46.82\n-54.162933\n25.57\n0.000\n70.61\n1.358\n\n\n2025-04-29 23:50:00\nNaN\nNaN\nNaN\n861.9176\n0.0\n47.47\n-54.986312\n25.59\n0.000\n133.60\n0.625\n\n\n2025-04-30 00:00:00\nNaN\nNaN\nNaN\n861.9011\n0.0\n46.62\n-55.652470\n25.33\n0.000\n155.30\n1.479\n\n\n\n\n79036 rows × 11 columns\n\n\n\n\n\n\n\n\n\nImportante\n\n\n\nSe decidio no tener datos cuando la altura solar es negativa, para poder sacar promedio diario de las horas de sol en las variables direct horizontal irradiance, direct normal irradiance, global horizontal irradiance.\n\n\n\nmsno.matrix(tmx)",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Datos de una estación meteorológica</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_002_matplotlib_seaborn_plotly/001_matplotlib.html",
    "href": "sesiones/notebooks_002_matplotlib_seaborn_plotly/001_matplotlib.html",
    "title": "8  Matplotlib",
    "section": "",
    "text": "Tips\nNo uses nombres como df, df_algo, evita df y usa nombres cortos, sin mayúsculas, de preferencia sin guiones bajos, y que tengan un significado para ti y tu equipe de trabajo.\ntmxhace referencia a temixco, es más corto y fácil de escribir\nf = \"../data/ClimaLab_2023-10-27_2025-04-30.parquet\"\ntmx = pd.read_parquet(f)\ntmx.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nDatetimeIndex: 79036 entries, 2023-10-27 16:40:00 to 2025-04-30 00:00:00\nData columns (total 11 columns):\n #   Column          Non-Null Count  Dtype  \n---  ------          --------------  -----  \n 0   dhi             39186 non-null  float64\n 1   dni             39043 non-null  float64\n 2   ghi             39104 non-null  float64\n 3   p_atm           79036 non-null  float64\n 4   rain_acc        79036 non-null  float64\n 5   rh              79036 non-null  float64\n 6   solar_altitude  79036 non-null  float64\n 7   tdb             79036 non-null  float64\n 8   uv              79036 non-null  float64\n 9   wd              79036 non-null  float64\n 10  ws              79036 non-null  float64\ndtypes: float64(11)\nmemory usage: 7.2 MB",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_002_matplotlib_seaborn_plotly/001_matplotlib.html#matplotlib-y-la-programación-orientada-a-objetos",
    "href": "sesiones/notebooks_002_matplotlib_seaborn_plotly/001_matplotlib.html#matplotlib-y-la-programación-orientada-a-objetos",
    "title": "8  Matplotlib",
    "section": "Matplotlib y la programación orientada a objetos",
    "text": "Matplotlib y la programación orientada a objetos\n¿Qué es la “programación orientada a objetos” (POO) en Matplotlib?\nMatplotlib tiene dos “modos” de uso:\nModo procedural/estado global (pyplot puro): Usas funciones como plt.plot(…), plt.title(…), y Matplotlib va operando sobre “la figura actual” y “los ejes actuales”. Es rápido para bocetar.\nModo orientado a objetos (OO): Tú manipulas objetos explícitos: una Figure (la hoja) que contiene uno o varios Axes (los “sistemas de ejes” donde dibujas). A su vez, cada Axes contiene Artists (líneas, textos, parches). En vez de decir “pon título a lo actual”, le dices al objeto ax: “pon tu título”.\n\nLa siguiente gr’afica es posible\nPeeero, no se recomienda hacerlo así.\n\n\n# Variables esperadas en tmx:\n# ['dhi', 'dni', 'ghi', 'p_atm', 'rain_acc', 'rh', 'solar_altitude', 'tdb', 'uv', 'wd', 'ws']\n\nplt.figure(figsize=(14, 22))\n\n\n# plt.subplot(11, 1, 1) es una llamada procedural que:\n\n# Divide el “canvas” en una rejilla de 11 filas × 1 columna\n\n# Activa (y devuelve) el subplot número 1 de esa rejilla (el de arriba del todo)\n# --- 1) dhi ---\nax1 = plt.subplot(11, 1, 1)\nplt.plot(tmx.index, tmx['dhi'], label='dhi')\nplt.ylabel('dhi')\nplt.legend()\n\n# --- 2) dni ---\nplt.subplot(11, 1, 2, sharex=ax1)\nplt.plot(tmx.index, tmx['dni'], label='dni')\nplt.ylabel('dni')\nplt.legend()\n\n# --- 3) ghi ---\nplt.subplot(11, 1, 3, sharex=ax1)\nplt.plot(tmx.index, tmx['ghi'], label='ghi')\nplt.ylabel('ghi')\nplt.legend()\n\n# --- 4) p_atm ---\nplt.subplot(11, 1, 4, sharex=ax1)\nplt.plot(tmx.index, tmx['p_atm'], label='p_atm')\nplt.ylabel('p_atm')\nplt.legend()\n\n# --- 5) rain_acc ---\nplt.subplot(11, 1, 5, sharex=ax1)\nplt.plot(tmx.index, tmx['rain_acc'], label='rain_acc')\nplt.ylabel('rain_acc')\nplt.legend()\n\n# --- 6) rh ---\nplt.subplot(11, 1, 6, sharex=ax1)\nplt.plot(tmx.index, tmx['rh'], label='rh')\nplt.ylabel('rh')\nplt.legend()\n\n# --- 7) solar_altitude ---\nplt.subplot(11, 1, 7, sharex=ax1)\nplt.plot(tmx.index, tmx['solar_altitude'], label='solar_altitude')\nplt.ylabel('solar_altitude')\nplt.legend()\n\n# --- 8) tdb ---\nplt.subplot(11, 1, 8, sharex=ax1)\nplt.plot(tmx.index, tmx['tdb'], label='tdb')\nplt.ylabel('tdb')\nplt.legend(loc='upper right')\n\n# --- 9) uv ---\nplt.subplot(11, 1, 9, sharex=ax1)\nplt.plot(tmx.index, tmx['uv'], label='uv')\nplt.ylabel('uv')\nplt.legend()\n\n# --- 10) wd ---\nplt.subplot(11, 1, 10, sharex=ax1)\nplt.plot(tmx.index, tmx['wd'], label='wd')\nplt.ylabel('wd')\nplt.legend()\n\n# --- 11) ws ---\nplt.subplot(11, 1, 11, sharex=ax1)\nplt.plot(tmx.index, tmx['ws'], label='ws')\nplt.ylabel('ws')\nplt.xlabel('Tiempo')\nplt.legend()",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_002_matplotlib_seaborn_plotly/001_matplotlib.html#por-que-escribir-cuando-puedes-iterar",
    "href": "sesiones/notebooks_002_matplotlib_seaborn_plotly/001_matplotlib.html#por-que-escribir-cuando-puedes-iterar",
    "title": "8  Matplotlib",
    "section": "Por qu’e escribir cuando puedes iterar",
    "text": "Por qu’e escribir cuando puedes iterar\nconceptos claves: - columnas, iterable - axs, iterable con len(columnas) objetos\n\ncolumnas = tmx.columns\n\nfig, axs = plt.subplots(len(columnas),1, figsize=(12,18),sharex=True)\n\nfor i,columna in enumerate(columnas):\n    axs[i].plot(tmx[columna],label=columna)\n    axs[i].legend()\n    axs[i].set_ylabel(columna)\n\n\n\n\n\n\n\n\n\ncolumnas = tmx.columns\ncolores = ['black','gray','tab:blue','tab:orange','tab:green','green','tab:red','tab:red','tab:red','tab:red','black','gray','tab:blue','tab:orange','tab:green','green']\n\n\nfig, axs = plt.subplots(len(columnas),1, figsize=(12,18),sharex=True)\n\nfor i,columna in enumerate(columnas):\n    axs[i].plot(tmx[columna],label=columna,color=colores[i])\n    axs[i].legend()\n    axs[i].set_ylabel(columna)\n\n\n\n\n\n\n\n\nEs importante conocer la anatomia de una figura desde matplotlib y aprender los conceptos de POO, recomendamos aprender matplotlib antes de pasar a graficadores m’as avanzados como plotly o seaborn, por eso, te dejo la anatomy of a figure de la documentaci’on de matplotlib\nhttps://matplotlib.org/stable/gallery/showcase/anatomy.html\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib.patches import Circle\nfrom matplotlib.patheffects import withStroke\nfrom matplotlib.ticker import AutoMinorLocator, MultipleLocator\n\nroyal_blue = [0, 20/256, 82/256]\n\n\n# make the figure\n\nnp.random.seed(19680801)\n\nX = np.linspace(0.5, 3.5, 100)\nY1 = 3+np.cos(X)\nY2 = 1+np.cos(1+X/0.75)/2\nY3 = np.random.uniform(Y1, Y2, len(X))\n\nfig = plt.figure(figsize=(7.5, 7.5))\nax = fig.add_axes([0.2, 0.17, 0.68, 0.7], aspect=1)\n\nax.xaxis.set_major_locator(MultipleLocator(1.000))\nax.xaxis.set_minor_locator(AutoMinorLocator(4))\nax.yaxis.set_major_locator(MultipleLocator(1.000))\nax.yaxis.set_minor_locator(AutoMinorLocator(4))\nax.xaxis.set_minor_formatter(\"{x:.2f}\")\n\nax.set_xlim(0, 4)\nax.set_ylim(0, 4)\n\nax.tick_params(which='major', width=1.0, length=10, labelsize=14)\nax.tick_params(which='minor', width=1.0, length=5, labelsize=10,\n               labelcolor='0.25')\n\nax.grid(linestyle=\"--\", linewidth=0.5, color='.25', zorder=-10)\n\nax.plot(X, Y1, c='C0', lw=2.5, label=\"Blue signal\", zorder=10)\nax.plot(X, Y2, c='C1', lw=2.5, label=\"Orange signal\")\nax.plot(X[::3], Y3[::3], linewidth=0, markersize=9,\n        marker='s', markerfacecolor='none', markeredgecolor='C4',\n        markeredgewidth=2.5)\n\nax.set_title(\"Anatomy of a figure\", fontsize=20, verticalalignment='bottom')\nax.set_xlabel(\"x Axis label\", fontsize=14)\nax.set_ylabel(\"y Axis label\", fontsize=14)\nax.legend(loc=\"upper right\", fontsize=14)\n\n\n# Annotate the figure\n\ndef annotate(x, y, text, code):\n    # Circle marker\n    c = Circle((x, y), radius=0.15, clip_on=False, zorder=10, linewidth=2.5,\n               edgecolor=royal_blue + [0.6], facecolor='none',\n               path_effects=[withStroke(linewidth=7, foreground='white')])\n    ax.add_artist(c)\n\n    # use path_effects as a background for the texts\n    # draw the path_effects and the colored text separately so that the\n    # path_effects cannot clip other texts\n    for path_effects in [[withStroke(linewidth=7, foreground='white')], []]:\n        color = 'white' if path_effects else royal_blue\n        ax.text(x, y-0.2, text, zorder=100,\n                ha='center', va='top', weight='bold', color=color,\n                style='italic', fontfamily='monospace',\n                path_effects=path_effects)\n\n        color = 'white' if path_effects else 'black'\n        ax.text(x, y-0.33, code, zorder=100,\n                ha='center', va='top', weight='normal', color=color,\n                fontfamily='monospace', fontsize='medium',\n                path_effects=path_effects)\n\n\nannotate(3.5, -0.13, \"Minor tick label\", \"ax.xaxis.set_minor_formatter\")\nannotate(-0.03, 1.0, \"Major tick\", \"ax.yaxis.set_major_locator\")\nannotate(0.00, 3.75, \"Minor tick\", \"ax.yaxis.set_minor_locator\")\nannotate(-0.15, 3.00, \"Major tick label\", \"ax.yaxis.set_major_formatter\")\nannotate(1.68, -0.39, \"xlabel\", \"ax.set_xlabel\")\nannotate(-0.38, 1.67, \"ylabel\", \"ax.set_ylabel\")\nannotate(1.52, 4.15, \"Title\", \"ax.set_title\")\nannotate(1.75, 2.80, \"Line\", \"ax.plot\")\nannotate(2.25, 1.54, \"Markers\", \"ax.scatter\")\nannotate(3.00, 3.00, \"Grid\", \"ax.grid\")\nannotate(3.60, 3.58, \"Legend\", \"ax.legend\")\nannotate(2.5, 0.55, \"Axes\", \"fig.subplots\")\nannotate(4, 4.5, \"Figure\", \"plt.figure\")\nannotate(0.65, 0.01, \"x Axis\", \"ax.xaxis\")\nannotate(0, 0.36, \"y Axis\", \"ax.yaxis\")\nannotate(4.0, 0.7, \"Spine\", \"ax.spines\")\n\n# frame around figure\nfig.patch.set(linewidth=4, edgecolor='0.5')\nplt.show()\n\n\n\n\n\n\n\n\n\nMatplotlib primero (fundamentos y control fino)\nEs la base del ecosistema: todo lo que hace Seaborn/Plotly en 2D “pasa” por conceptos que nacen en Matplotlib (figura, ejes, artistas).\nEnseña a pensar en la jerarquía Figure→Axes→Artists y en el estilo OO (control total del layout, ejes secundarios, anotaciones).\nSi dominas Matplotlib, cualquier “rareza” de gráficos la puedes resolver.\n\n\nSeaborn después (estadística y estética por defecto)\nAcelera el análisis exploratorio: relplot, catplot, displot, pairplot, manejo integrado de DataFrames y variables categóricas/numéricas.\nTe da buenos estilos por defecto y mapea variables a color/forma/tamaño fácilmente.\nIdeal para enseñar comparaciones estadísticas y “long vs wide data” sin pelearte con bajo nivel.\n\n\nPlotly al final (interactividad)\nAñade hover, zoom, selección, exportación a HTML y gráficos 3D con poca fricción.\nPerfecto para dashboards o entregar resultados interactivos a tomadores de decisión.\nUna vez claros los conceptos de capas y ejes, la transición a objetos go.Figure/px es natural.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_002_matplotlib_seaborn_plotly/002_anatomia_de_una_figura.html",
    "href": "sesiones/notebooks_002_matplotlib_seaborn_plotly/002_anatomia_de_una_figura.html",
    "title": "9  Anatomia de una figura",
    "section": "",
    "text": "import  pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib.patches import Circle\nfrom matplotlib.patheffects import withStroke\nfrom matplotlib.ticker import AutoMinorLocator, MultipleLocator\n\nroyal_blue = [0, 20/256, 82/256]\n\n\n# make the figure\n\nnp.random.seed(19680801)\n\nX = np.linspace(0.5, 3.5, 100)\nY1 = 3+np.cos(X)\nY2 = 1+np.cos(1+X/0.75)/2\nY3 = np.random.uniform(Y1, Y2, len(X))\n\nfig = plt.figure(figsize=(7.5, 7.5))\nax = fig.add_axes([0.2, 0.17, 0.68, 0.7], aspect=1)\n\nax.xaxis.set_major_locator(MultipleLocator(1.000))\nax.xaxis.set_minor_locator(AutoMinorLocator(4))\nax.yaxis.set_major_locator(MultipleLocator(1.000))\nax.yaxis.set_minor_locator(AutoMinorLocator(4))\nax.xaxis.set_minor_formatter(\"{x:.2f}\")\n\nax.set_xlim(0, 4)\nax.set_ylim(0, 4)\n\nax.tick_params(which='major', width=1.0, length=10, labelsize=14)\nax.tick_params(which='minor', width=1.0, length=5, labelsize=10,\n               labelcolor='0.25')\n\nax.grid(linestyle=\"--\", linewidth=0.5, color='.25', zorder=-10)\n\nax.plot(X, Y1, c='C0', lw=2.5, label=\"Blue signal\", zorder=10)\nax.plot(X, Y2, c='C1', lw=2.5, label=\"Orange signal\")\nax.plot(X[::3], Y3[::3], linewidth=0, markersize=9,\n        marker='s', markerfacecolor='none', markeredgecolor='C4',\n        markeredgewidth=2.5)\n\nax.set_title(\"Anatomy of a figure\", fontsize=20, verticalalignment='bottom')\nax.set_xlabel(\"x Axis label\", fontsize=14)\nax.set_ylabel(\"y Axis label\", fontsize=14)\nax.legend(loc=\"upper right\", fontsize=14)\n\n\n# Annotate the figure\n\ndef annotate(x, y, text, code):\n    # Circle marker\n    c = Circle((x, y), radius=0.15, clip_on=False, zorder=10, linewidth=2.5,\n               edgecolor=royal_blue + [0.6], facecolor='none',\n               path_effects=[withStroke(linewidth=7, foreground='white')])\n    ax.add_artist(c)\n\n    # use path_effects as a background for the texts\n    # draw the path_effects and the colored text separately so that the\n    # path_effects cannot clip other texts\n    for path_effects in [[withStroke(linewidth=7, foreground='white')], []]:\n        color = 'white' if path_effects else royal_blue\n        ax.text(x, y-0.2, text, zorder=100,\n                ha='center', va='top', weight='bold', color=color,\n                style='italic', fontfamily='monospace',\n                path_effects=path_effects)\n\n        color = 'white' if path_effects else 'black'\n        ax.text(x, y-0.33, code, zorder=100,\n                ha='center', va='top', weight='normal', color=color,\n                fontfamily='monospace', fontsize='medium',\n                path_effects=path_effects)\n\n\nannotate(3.5, -0.13, \"Minor tick label\", \"ax.xaxis.set_minor_formatter\")\nannotate(-0.03, 1.0, \"Major tick\", \"ax.yaxis.set_major_locator\")\nannotate(0.00, 3.75, \"Minor tick\", \"ax.yaxis.set_minor_locator\")\nannotate(-0.15, 3.00, \"Major tick label\", \"ax.yaxis.set_major_formatter\")\nannotate(1.68, -0.39, \"xlabel\", \"ax.set_xlabel\")\nannotate(-0.38, 1.67, \"ylabel\", \"ax.set_ylabel\")\nannotate(1.52, 4.15, \"Title\", \"ax.set_title\")\nannotate(1.75, 2.80, \"Line\", \"ax.plot\")\nannotate(2.25, 1.54, \"Markers\", \"ax.scatter\")\nannotate(3.00, 3.00, \"Grid\", \"ax.grid\")\nannotate(3.60, 3.58, \"Legend\", \"ax.legend\")\nannotate(2.5, 0.55, \"Axes\", \"fig.subplots\")\nannotate(4, 4.5, \"Figure\", \"plt.figure\")\nannotate(0.65, 0.01, \"x Axis\", \"ax.xaxis\")\nannotate(0, 0.36, \"y Axis\", \"ax.yaxis\")\nannotate(4.0, 0.7, \"Spine\", \"ax.spines\")\n\n# frame around figure\nfig.patch.set(linewidth=4, edgecolor='0.5')\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Anatomia de una figura</span>"
    ]
  },
  {
    "objectID": "sesiones/notebooks_002_matplotlib_seaborn_plotly/003_EDA_seaborn.html",
    "href": "sesiones/notebooks_002_matplotlib_seaborn_plotly/003_EDA_seaborn.html",
    "title": "10  Seaborn",
    "section": "",
    "text": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\nf = \"../data/ClimaLab_2023-10-27_2025-04-30.parquet\"\ntmx = pd.read_parquet(f)\ntmx.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nDatetimeIndex: 79036 entries, 2023-10-27 16:40:00 to 2025-04-30 00:00:00\nData columns (total 11 columns):\n #   Column          Non-Null Count  Dtype  \n---  ------          --------------  -----  \n 0   dhi             39186 non-null  float64\n 1   dni             39043 non-null  float64\n 2   ghi             39104 non-null  float64\n 3   p_atm           79036 non-null  float64\n 4   rain_acc        79036 non-null  float64\n 5   rh              79036 non-null  float64\n 6   solar_altitude  79036 non-null  float64\n 7   tdb             79036 non-null  float64\n 8   uv              79036 non-null  float64\n 9   wd              79036 non-null  float64\n 10  ws              79036 non-null  float64\ndtypes: float64(11)\nmemory usage: 7.2 MB\n\n\n\ntmx.index.month_name()\n\nIndex(['October', 'October', 'October', 'October', 'October', 'October',\n       'October', 'October', 'October', 'October',\n       ...\n       'April', 'April', 'April', 'April', 'April', 'April', 'April', 'April',\n       'April', 'April'],\n      dtype='object', name='date', length=79036)\n\n\n\ntmx2024 = tmx[tmx.index.year == 2024].copy()\ntmx2024_horario = tmx2024.tdb.resample(\"h\").max().copy()\ntdb_heatmap = tmx2024_horario.groupby(\n            by=[\n                tmx2024_horario.index.month,\n                tmx2024_horario.index.hour]\n            ).mean().unstack().T\ntdb_heatmap\n\n\n\n\n\n\n\ndate\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\ndate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n19.855806\n22.210000\n23.666774\n26.029000\n27.401290\n24.646333\n21.291935\n21.248710\n20.750667\n20.318387\n19.956000\n18.789032\n\n\n1\n19.075806\n21.249286\n22.894194\n25.174333\n26.405806\n24.049333\n20.897419\n21.000645\n20.473000\n19.732903\n19.239667\n18.223226\n\n\n2\n18.565806\n20.273214\n22.337742\n24.334333\n25.687742\n23.453000\n20.463226\n20.622581\n20.212333\n19.278387\n18.810000\n17.567742\n\n\n3\n18.227742\n19.526429\n21.666129\n23.567667\n24.965161\n22.915000\n20.036129\n20.400000\n20.109000\n18.740645\n18.176000\n16.937097\n\n\n4\n17.727097\n18.635714\n20.926774\n22.976333\n24.266452\n22.467000\n19.728710\n20.118065\n19.875667\n18.350000\n17.626000\n16.300323\n\n\n5\n17.296129\n18.077143\n20.316129\n22.367667\n23.711935\n22.071667\n19.502903\n19.748710\n19.706333\n17.951613\n17.222000\n15.818710\n\n\n6\n16.787742\n17.385714\n19.708065\n21.725667\n23.451935\n22.024000\n19.417419\n19.438065\n19.516000\n17.536129\n16.712333\n15.365806\n\n\n7\n16.602581\n17.290345\n20.979677\n24.571000\n26.739355\n24.158333\n21.366774\n21.104839\n20.465333\n19.054839\n17.571667\n15.417097\n\n\n8\n20.759355\n22.426207\n25.960000\n27.223667\n29.138065\n25.731333\n22.978387\n23.556129\n22.180667\n22.256774\n22.721333\n19.876129\n\n\n9\n23.475161\n24.703793\n26.959355\n28.200000\n29.973548\n26.498000\n24.160968\n24.543226\n23.519333\n23.470645\n24.208667\n22.083548\n\n\n10\n24.632581\n25.572759\n27.964839\n29.400667\n31.147742\n27.544333\n24.777742\n25.280323\n24.549333\n23.996452\n24.807333\n23.096129\n\n\n11\n25.500645\n26.553448\n29.235484\n30.764000\n32.458065\n28.747333\n25.639677\n26.041290\n25.387667\n25.114516\n25.796667\n24.353548\n\n\n12\n26.643226\n28.049655\n30.776129\n32.102000\n33.835484\n30.133667\n26.639032\n26.871935\n25.933000\n26.121613\n26.999333\n25.706452\n\n\n13\n27.736452\n29.306897\n32.078065\n33.268667\n35.066774\n31.310333\n27.437419\n27.431290\n26.506333\n26.916129\n28.241667\n27.036129\n\n\n14\n28.618710\n30.338621\n33.227097\n34.235000\n36.106452\n32.148667\n28.077742\n28.239677\n26.866333\n27.598387\n29.137000\n27.979032\n\n\n15\n29.280645\n31.301379\n34.062903\n34.966000\n36.845806\n32.598000\n28.573871\n28.886452\n27.185000\n27.760645\n29.713333\n28.495484\n\n\n16\n29.481935\n31.634828\n34.420645\n35.361000\n37.129355\n32.582333\n28.672258\n29.112258\n27.028000\n27.413226\n29.574000\n28.786774\n\n\n17\n28.901613\n31.481034\n34.311613\n35.170333\n36.740645\n32.173000\n28.182903\n28.664516\n26.260333\n26.410645\n28.548333\n27.485161\n\n\n18\n27.572581\n30.358966\n33.256452\n34.384000\n35.330645\n31.040667\n26.929032\n27.313226\n25.279667\n24.860968\n26.096667\n25.344194\n\n\n19\n25.001290\n27.545862\n31.348065\n32.456000\n33.972581\n29.677333\n25.657097\n25.804839\n24.214667\n22.807742\n22.699667\n22.178065\n\n\n20\n22.836774\n24.907241\n29.540968\n30.934333\n32.055161\n27.927333\n24.232581\n24.137097\n23.375000\n22.051613\n21.920000\n21.123548\n\n\n21\n21.865484\n23.832759\n27.275161\n29.411667\n30.971290\n27.196000\n23.484839\n23.412903\n22.435667\n21.786129\n21.280667\n20.565484\n\n\n22\n21.200000\n23.458571\n25.900968\n28.118667\n29.490323\n26.102667\n22.823226\n22.558387\n21.972333\n21.612903\n20.994000\n20.182258\n\n\n23\n20.646774\n22.894286\n24.616129\n27.143333\n28.500323\n24.994667\n21.967419\n21.727097\n21.248333\n21.083548\n20.517000\n19.664194\n\n\n\n\n\n\n\n\n\n# Draw a heatmap with the numeric values in each cell\nf, ax = plt.subplots(figsize=(12, 2))\nsns.heatmap(tdb_heatmap,  cmap=\"viridis\")\n\n\n\n\n\n\n\n\n\ntmx[\"mes\"] = tmx.index.month_name()\ntmx\n\n\n\n\n\n\n\nvariable\ndhi\ndni\nghi\np_atm\nrain_acc\nrh\nsolar_altitude\ntdb\nuv\nwd\nws\nmes\n\n\ndate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2023-10-27 16:40:00\nNaN\n443.2\n238.0\n873.2120\n17.1\n61.14\n18.644204\n28.07\n0.018\n226.50\n1.569\nOctober\n\n\n2023-10-27 16:50:00\nNaN\nNaN\n187.5\n873.2559\n6.3\n62.76\n16.430841\n27.78\n0.014\n171.60\n1.631\nOctober\n\n\n2023-10-27 17:00:00\n1360.00\nNaN\n167.5\n873.2161\n27.8\n64.26\n14.204506\n28.00\n0.011\n314.70\n0.479\nOctober\n\n\n2023-10-27 17:10:00\n74.14\n520.5\n163.1\n873.1834\n5.4\n66.82\n11.967374\n28.69\n0.009\n163.60\n0.504\nOctober\n\n\n2023-10-27 17:20:00\n67.62\n269.2\n126.1\n873.2775\n1.5\n60.92\n9.722172\n28.77\n0.006\n260.30\n0.964\nOctober\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2025-04-29 23:20:00\nNaN\nNaN\nNaN\n861.8378\n0.0\n43.17\n-52.087453\n26.46\n0.000\n164.30\n0.808\nApril\n\n\n2025-04-29 23:30:00\nNaN\nNaN\nNaN\n861.8724\n0.0\n46.12\n-53.192891\n26.30\n0.000\n337.00\n0.518\nApril\n\n\n2025-04-29 23:40:00\nNaN\nNaN\nNaN\n861.8623\n0.0\n46.82\n-54.162933\n25.57\n0.000\n70.61\n1.358\nApril\n\n\n2025-04-29 23:50:00\nNaN\nNaN\nNaN\n861.9176\n0.0\n47.47\n-54.986312\n25.59\n0.000\n133.60\n0.625\nApril\n\n\n2025-04-30 00:00:00\nNaN\nNaN\nNaN\n861.9011\n0.0\n46.62\n-55.652470\n25.33\n0.000\n155.30\n1.479\nApril\n\n\n\n\n79036 rows × 12 columns\n\n\n\n\nf, ax = plt.subplots(figsize=(12, 2))\nsns.boxplot(x=\"mes\", y=\"tdb\",data=tmx)",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Seaborn</span>"
    ]
  }
]